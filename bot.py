from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, filters, CallbackQueryHandler
from telegram import error as telegram_error
import psycopg2
import logging
import sys

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING, TYPING_COUNTRY, TYPING_SPECIALTY, TYPING_BUDGET, TYPING_LANGUAGE = range(5)

# Callback data
COUNTRY_FILTER = "country"
SPECIALTY_FILTER = "specialty"
BUDGET_FILTER = "budget"
LANGUAGE_FILTER = "language"

def search_universities(country, specialty, budget, language):
    try:
        conn = psycopg2.connect(
            dbname="unibot",
            user="postgres",
            password="@obwZWJq@Y46Yi",
            host="localhost",
            port="5432"
        )
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = """
            SELECT name, country, specialty, language, cost, link
            FROM universities
            WHERE 1=1
        """
        params = []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
        if country:
            countries = [c.strip() for c in country.split(",")]
            country_conditions = []
            for c in countries:
                country_conditions.append("country ILIKE %s")
                params.append(f"%{c}%")
            if country_conditions:
                query += f" AND ({' OR '.join(country_conditions)})"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        if specialty:
            specialties = [s.strip() for s in specialty.split(",")]
            specialty_conditions = []
            for s in specialties:
                specialty_conditions.append("specialty ILIKE %s")
                params.append(f"%{s}%")
            if specialty_conditions:
                query += f" AND ({' OR '.join(specialty_conditions)})"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —è–∑—ã–∫–∞
        if language:
            languages = [l.strip() for l in language.split(",")]
            language_conditions = []
            for l in languages:
                language_conditions.append("language ILIKE %s")
                params.append(f"%{l}%")
            if language_conditions:
                query += f" AND ({' OR '.join(language_conditions)})"
        
        # –ë—é–¥–∂–µ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if budget != 1000000:
            query += " AND cost <= %s"
            params.append(budget)
            
        cursor.execute(query, params)
        results = cursor.fetchall()
        conn.close()
        return results
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# =================== –ë–û–¢ ===================

def get_filter_keyboard(context: ContextTypes.DEFAULT_TYPE = None):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    def get_status(param):
        if not context or param not in context.user_data:
            return ""
        return "‚úÖ"
    
    keyboard = [
        [
            InlineKeyboardButton(f"–°—Ç—Ä–∞–Ω–∞ {get_status('country')}", callback_data=COUNTRY_FILTER),
            InlineKeyboardButton(f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å {get_status('specialty')}", callback_data=SPECIALTY_FILTER)
        ],
        [
            InlineKeyboardButton(f"–ë—é–¥–∂–µ—Ç $ {get_status('budget')}", callback_data=BUDGET_FILTER),
            InlineKeyboardButton(f"–Ø–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è {get_status('language')}", callback_data=LANGUAGE_FILTER)
        ],
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ø–æ —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. "
        "–Ø –∑–Ω–∞—é –º–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø–æ–∏—Å–∫!"
    )
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_filter_keyboard(context)
    )
    return CHOOSING

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "new_search":
        context.user_data.clear()
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_filter_keyboard(context)
        )
        return CHOOSING

    if query.data == "search":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        defaults = {
            "country": "",
            "specialty": "",
            "budget": 1000000,  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É
            "language": ""
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for key in defaults:
            if key not in context.user_data:
                context.user_data[key] = defaults[key]
        
        return await show_results(update, context)

    messages = {
        COUNTRY_FILTER: "üåç –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω\n\n–§–æ—Ä–º–∞—Ç: –°—Ç—Ä–∞–Ω–∞, –°—Ç—Ä–∞–Ω–∞, –°—Ç—Ä–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä: –ì–µ—Ä–º–∞–Ω–∏—è, –§—Ä–∞–Ω—Ü–∏—è, –ò—Ç–∞–ª–∏—è\n\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω—É: –ì–µ—Ä–º–∞–Ω–∏—è",
        SPECIALTY_FILTER: "üìö –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n\n–§–æ—Ä–º–∞—Ç: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n–ü—Ä–∏–º–µ—Ä: IT, –º–µ–¥–∏—Ü–∏–Ω–∞, —ç–∫–æ–Ω–æ–º–∏–∫–∞\n\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: IT",
        BUDGET_FILTER: "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ $:",
        LANGUAGE_FILTER: "üó£ –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è\n\n–§–æ—Ä–º–∞—Ç: –Ø–∑—ã–∫, –Ø–∑—ã–∫, –Ø–∑—ã–∫\n–ü—Ä–∏–º–µ—Ä: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π\n\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω —è–∑—ã–∫: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
    }

    context.user_data['current_filter'] = query.data
    await query.message.edit_text(messages[query.data])
    
    return {
        COUNTRY_FILTER: TYPING_COUNTRY,
        SPECIALTY_FILTER: TYPING_SPECIALTY,
        BUDGET_FILTER: TYPING_BUDGET,
        LANGUAGE_FILTER: TYPING_LANGUAGE
    }[query.data]

async def input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_filter = context.user_data.get('current_filter')
    text = update.message.text

    if current_filter == BUDGET_FILTER:
        try:
            budget_value = int(text)
            if budget_value <= 0:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±—é–¥–∂–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)",
                    reply_markup=get_filter_keyboard(context)
                )
                return TYPING_BUDGET
            context.user_data["budget"] = budget_value
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            return TYPING_BUDGET
    else:
        context.user_data[current_filter] = text

    await update.message.reply_text(
        f"–ü–∞—Ä–∞–º–µ—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫':",
        reply_markup=get_filter_keyboard(context)
    )
    return CHOOSING

async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    # –î–æ—Å—Ç–∞—ë–º —Ñ–∏–ª—å—Ç—Ä—ã
    country = context.user_data["country"]
    specialty = context.user_data["specialty"]
    budget = context.user_data["budget"]
    language = context.user_data["language"]

    print(f"–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: —Å—Ç—Ä–∞–Ω–∞='{country}', —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å='{specialty}', –±—é–¥–∂–µ—Ç={budget}, —è–∑—ã–∫='{language}'")

    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ
    results = search_universities(country, specialty, budget, language)
    if results:
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    else:
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if results is None:
        text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif results:
        text = "–ù–∞—à—ë–ª —Ç–∞–∫–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã:\n\n"
        for r in results:
            text += f"üèõ {r[0]} ({r[1]})\nüìö {r[2]}\nüó£ {r[3]}\nüí∞ {r[4]} ‚Ç¨/–≥–æ–¥\nüîó {r[5]}\n\n"
    else:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(text, reply_markup=reply_markup)
    return CHOOSING

    # –î–æ—Å—Ç–∞—ë–º —Ñ–∏–ª—å—Ç—Ä—ã
    country = context.user_data["country"]
    specialty = context.user_data["specialty"]
    budget = context.user_data["budget"]
    language = context.user_data["language"]

    print(f"–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: —Å—Ç—Ä–∞–Ω–∞='{country}', —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å='{specialty}', –±—é–¥–∂–µ—Ç={budget}, —è–∑—ã–∫='{language}'")

    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ
    results = search_universities(country, specialty, budget, language)
    if results:
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    else:
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if results is None:
        text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif results:
        text = "–ù–∞—à—ë–ª —Ç–∞–∫–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã:\n\n"
        for r in results:
            text += f"üèõ {r[0]} ({r[1]})\nüìö {r[2]}\nüó£ {r[3]}\nüí∞ {r[4]} ‚Ç¨/–≥–æ–¥\nüîó {r[5]}\n\n"
    else:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏"

    await update.message.reply_text(text)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.")
    return ConversationHandler.END


import asyncio
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors caused by updates."""
    logger.error("Exception while handling an update:", exc_info=context.error)
    
    if isinstance(context.error, telegram_error.Conflict):
        logger.error("Conflict: Another instance of the bot is running")
        sys.exit(1)

async def set_commands(application: Application):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        ('start', '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤')
    ]
    await application.bot.set_my_commands(commands)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
    app = (
        Application.builder()
        .token("8350744806:AAGTMP5KG_wdLlO8CF3pham9CKF4YPhnxlk")
        .read_timeout(30)
        .write_timeout(30)
        .connect_timeout(30)
        .pool_timeout(30)
        .build()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await set_commands(app)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [CallbackQueryHandler(button_handler)],
            TYPING_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_handler)],
            TYPING_SPECIALTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_handler)],
            TYPING_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_handler)],
            TYPING_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await app.initialize()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –∂–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        await app.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    # –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, VS Code Debug Console)
    import nest_asyncio
    nest_asyncio.apply()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except telegram_error.Conflict:
        logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω")
