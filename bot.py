from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, filters
from telegram import error as telegram_error
import psycopg2
import logging
import sys

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
COUNTRY, SPECIALTY, BUDGET, LANGUAGE = range(4)

def search_universities(country, specialty, budget, language):
    try:
        conn = psycopg2.connect(
            dbname="unibot",
            user="postgres",
            password="@obwZWJq@Y46Yi",
            host="localhost",
            port="5432"
        )
        cursor = conn.cursor()
        cursor.execute(
            """
            SELECT name, country, specialty, language, cost, link
            FROM universities
            WHERE country ILIKE %s
              AND specialty ILIKE %s
              AND language ILIKE %s
              AND cost <= %s
            """,
            (f"%{country}%", f"%{specialty}%", f"%{language}%", budget)
        )
        results = cursor.fetchall()
        conn.close()
        return results
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# =================== –ë–û–¢ ===================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è?")
    return COUNTRY

async def country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["country"] = update.message.text
    await update.message.reply_text("–û–∫–µ–π! –ê –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: IT, –º–µ–¥–∏—Ü–∏–Ω–∞, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)?")
    return SPECIALTY

async def specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["specialty"] = update.message.text
    await update.message.reply_text("–•–æ—Ä–æ—à–æ. –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)?")
    return BUDGET

async def budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        budget_value = int(update.message.text)
        if budget_value <= 0:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±—é–¥–∂–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)")
            return BUDGET
        context.user_data["budget"] = budget_value
        await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ. –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –æ–±—É—á–µ–Ω–∏—è —Ö–æ—á–µ—à—å?")
        return LANGUAGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –±—é–¥–∂–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)")
        return BUDGET

async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["language"] = update.message.text

    # –î–æ—Å—Ç–∞—ë–º —Ñ–∏–ª—å—Ç—Ä—ã
    country = context.user_data["country"]
    specialty = context.user_data["specialty"]
    budget = context.user_data["budget"]
    language = context.user_data["language"]

    print(f"–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: —Å—Ç—Ä–∞–Ω–∞='{country}', —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å='{specialty}', –±—é–¥–∂–µ—Ç={budget}, —è–∑—ã–∫='{language}'")

    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ
    results = search_universities(country, specialty, budget, language)
    if results:
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    else:
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if results is None:
        text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif results:
        text = "–ù–∞—à—ë–ª —Ç–∞–∫–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã:\n\n"
        for r in results:
            text += f"üèõ {r[0]} ({r[1]})\nüìö {r[2]}\nüó£ {r[3]}\nüí∞ {r[4]} ‚Ç¨/–≥–æ–¥\nüîó {r[5]}\n\n"
    else:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏"

    await update.message.reply_text(text)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.")
    return ConversationHandler.END


import asyncio
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors caused by updates."""
    logger.error("Exception while handling an update:", exc_info=context.error)
    
    if isinstance(context.error, telegram_error.Conflict):
        logger.error("Conflict: Another instance of the bot is running")
        sys.exit(1)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
    app = (
        Application.builder()
        .token("8350744806:AAGTMP5KG_wdLlO8CF3pham9CKF4YPhnxlk")
        .read_timeout(30)
        .write_timeout(30)
        .connect_timeout(30)
        .pool_timeout(30)
        .build()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, country)],
            SPECIALTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, specialty)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget)],
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, language)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await app.initialize()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –∂–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        await app.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    # –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, VS Code Debug Console)
    import nest_asyncio
    nest_asyncio.apply()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except telegram_error.Conflict:
        logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω")
